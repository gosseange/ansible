---

- name: Installer PostgreSQL
  ansible.builtin.package: 
    name: 
      - postgresql
      - python3-psycopg2
    state: present
    update_cache: yes

- name: S'assurer que le service PostgreSQL est démarré
  systemd:
    name: postgresql
    state: started
    enabled: true

- name: Copier sudoers
  become: yes
  become_user: root
  copy: 
    src: /etc/ansible/roles/postgres/files/sudoers
    dest: /etc/sudoers


- name: Copier les fichiers pg_hba.conf et pg_ident.conf
  block:
    - name: Copier pg_hba.conf
      ansible.builtin.copy:
        src: pg_hba.conf
        dest: /etc/postgresql/16/main/pg_hba.conf
        owner: postgres
        group: postgres
        mode: '0640'
        backup: true
      register: hba_result

    - name: Copier pg_ident.conf
      ansible.builtin.copy:
        src: pg_ident.conf
        dest: /etc/postgresql/16/main/pg_ident.conf
        owner: postgres
        group: postgres
        mode: '0640'
        backup: true
      register: ident_result


- name: Restart PostgreSQL service
  become: yes
  service:
    name: postgresql
    state: restarted


- name: Créer l'utilisateur gvm
  become: yes
  become_user: postgres
  vars:
   ansible_ssh_pipelining: true
  postgresql_user:
   name: gvm


- name: Créer BD gvmd
  become: yes
  become_user: postgres
  vars:
   ansible_ssh_pipelining: true
  postgresql_db:
   name: gvmd
   state: present

- name: Créer rôle DBA si non existant et le donner à GVM
  become: yes
  become_user: postgres
  vars:
    ansible_ssh_pipelining: true
  community.postgresql.postgresql_query:
    db: postgres
    query: |
      DO $$
      BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = 'dba') THEN
          CREATE ROLE dba WITH SUPERUSER NOINHERIT;
        END IF;
      END $$;
      GRANT dba TO gvm;

- name: Check if GVMD admin user exists
  become: yes
  become_user: gvm
  vars:
   ansible_ssh_pipelining: true
  command: /usr/local/sbin/gvmd --get-users
  register: gvmd_user_list
  changed_when: false

- name: Create GVMD admin user (only if not exists)
  become: yes
  become_user: gvm
  command: "/usr/local/sbin/gvmd --create-user={{ admin_user }} --password={{ admin_password }}"
  when: admin_user not in gvmd_user_list.stdout


- name: Get the admin user ID for setting Feed Import Owner
  become: yes
  become_user: gvm
  vars:
    ansible_ssh_pipelining: true
  command: /usr/local/sbin/gvmd --get-users --verbose | grep "{{admin_user}}" | awk '{print $2}'

- name: Set the Feed Import Owner
  become: yes
  become_user: gvm
  vars:
    ansible_ssh_pipelining: true
  command: "/usr/local/sbin/gvmd --modify-setting {{ feed_var }} --value `/usr/local/sbin/gvmd --get-users --verbose | grep {{admin_user}} | awk '{print $2}'`"

